#!/usr/bin/env python3

from datetime import datetime, timedelta
import numpy as np
import pandas as pd
from openai import OpenAI
import re
import logging

logger = logging.getLogger(__name__)

class PriceActionAnalyzer:
    """T≈ô√≠da pro anal√Ωzu price action dat pomoc√≠ AI."""

    def __init__(self, api_key):
        """
        Inicializuje analyz√°tor price action.
        
        Args:
            api_key (str): OpenAI API kl√≠ƒç
        """
        self.client = OpenAI(api_key=api_key)

    def detect_patterns(self, df):
        """
        Detekuje price action patterny v DataFrame.
        
        Args:
            df (pandas.DataFrame): DataFrame s OHLCV daty
            
        Returns:
            list: Seznam detekovan√Ωch pattern≈Ø
        """
        patterns = []
        
        # Detekce cenov√Ωch nerovnov√°h (Fair Value Gaps)
        for i in range(1, len(df)-1):
            # Bullish nerovnov√°ha
            if df['low'].iloc[i] > df['high'].iloc[i-1]:
                patterns.append(('Bullish FVG', df.index[i], df['high'].iloc[i-1], df['low'].iloc[i]))
            
            # Bearish nerovnov√°ha
            if df['high'].iloc[i] < df['low'].iloc[i-1]:
                patterns.append(('Bearish FVG', df.index[i], df['high'].iloc[i], df['low'].iloc[i-1]))

        # Detekce siln√Ωch z√≥n (Order Blocks)
        for i in range(1, len(df)-1):
            body_size = abs(df['close'].iloc[i] - df['open'].iloc[i])
            total_range = df['high'].iloc[i] - df['low'].iloc[i]
            
            if total_range > 0 and body_size / total_range > 0.7:
                # Bullish Order Block (sv√≠ƒçka p≈ôed v√Ωrazn√Ωm pohybem vzh≈Øru)
                if i < len(df)-2 and df['close'].iloc[i+1] > df['open'].iloc[i+1] and df['close'].iloc[i+1] > df['close'].iloc[i]:
                    patterns.append(('Bullish OB', df.index[i], df['low'].iloc[i], df['high'].iloc[i]))
                
                # Bearish Order Block (sv√≠ƒçka p≈ôed v√Ωrazn√Ωm pohybem dol≈Ø)
                if i < len(df)-2 and df['close'].iloc[i+1] < df['open'].iloc[i+1] and df['close'].iloc[i+1] < df['close'].iloc[i]:
                    patterns.append(('Bearish OB', df.index[i], df['low'].iloc[i], df['high'].iloc[i]))

        # Detekce fale≈°n√Ωch pr≈Øraz≈Ø (Liquidity Sweeps)
        lookback = 5
        for i in range(lookback, len(df)-1):
            high_level = df['high'].iloc[i-lookback:i].max()
            low_level = df['low'].iloc[i-lookback:i].min()
            
            # Pr≈Øraz vysoko s n√°sledn√Ωm n√°vratem (false breakout)
            if df['high'].iloc[i] > high_level and df['close'].iloc[i+1] < high_level:
                patterns.append(('False High Breakout', df.index[i], high_level, df['high'].iloc[i]))
            
            # Pr≈Øraz n√≠zko s n√°sledn√Ωm n√°vratem (false breakout)
            if df['low'].iloc[i] < low_level and df['close'].iloc[i+1] > low_level:
                patterns.append(('False Low Breakout', df.index[i], df['low'].iloc[i], low_level))

        # Detekce swingov√Ωch high/low (v√Ωznamn√© vrcholy a dna)
        for i in range(2, len(df)-2):
            # Swing high (lok√°ln√≠ vrchol)
            if df['high'].iloc[i] > df['high'].iloc[i-1] and df['high'].iloc[i] > df['high'].iloc[i-2] and \
               df['high'].iloc[i] > df['high'].iloc[i+1] and df['high'].iloc[i] > df['high'].iloc[i+2]:
                patterns.append(('Swing High', df.index[i], df['high'].iloc[i] * 0.99, df['high'].iloc[i] * 1.01))
            
            # Swing low (lok√°ln√≠ dno)
            if df['low'].iloc[i] < df['low'].iloc[i-1] and df['low'].iloc[i] < df['low'].iloc[i-2] and \
               df['low'].iloc[i] < df['low'].iloc[i+1] and df['low'].iloc[i] < df['low'].iloc[i+2]:
                patterns.append(('Swing Low', df.index[i], df['low'].iloc[i] * 0.99, df['low'].iloc[i] * 1.01))

        return patterns

    def generate_intraday_analysis(self, symbol, dataframes):
        """
        Generuje anal√Ωzu zamƒõ≈ôenou na intraday obchodov√°n√≠.
    
        Args:
            symbol (str): Obchodn√≠ symbol
            dataframes (dict): Slovn√≠k s DataFrame pro r≈Øzn√© ƒçasov√© r√°mce
    
        Returns:
            tuple: (anal√Ωza, support_z√≥ny, resistance_z√≥ny)
        """
        patterns_by_tf = {}
        for tf, df in dataframes.items():
            patterns_by_tf[tf] = self.detect_patterns(df)

        timeframe_data = []
        all_timeframes = ["4h", "30m", "5m"]
    
        for tf in all_timeframes:
            if tf in dataframes:
                df = dataframes[tf]
                num_candles = 5 if tf in ['4h'] else (10 if tf == '30m' else 15)
        
                tf_data = f"## ƒåasov√Ω r√°mec: {tf}\n"
                tf_data += f"Rozsah dat: {df.index[0]} a≈æ {df.index[-1]}\n"
                tf_data += f"Poƒçet sv√≠ƒçek: {len(df)}\n"
                tf_data += f"Posledn√≠ch {num_candles} sv√≠ƒçek:\n"
                tf_data += f"{df[['open','high','low','close','volume']].tail(num_candles).to_markdown()}\n\n"
        
                patterns = patterns_by_tf[tf]
                if patterns:
                    tf_data += f"Posledn√≠ patterny:\n"
                    for pattern in patterns[-8:]:  # Zobraz√≠me v√≠ce pattern≈Ø pro intraday anal√Ωzu
                        tf_data += f"- {pattern[0]} na √∫rovni {pattern[2]:.2f}-{pattern[3]:.2f} ({pattern[1]})\n"
            
                timeframe_data.append(tf_data)

        # Z√≠sk√°me aktu√°ln√≠ cenu z posledn√≠ho dataframe
        latest_price = None
        if '30m' in dataframes:
            latest_price = dataframes['30m']['close'].iloc[-1]
        elif '5m' in dataframes:
            latest_price = dataframes['5m']['close'].iloc[-1]
        elif '4h' in dataframes:
            latest_price = dataframes['4h']['close'].iloc[-1]

        prompt = f"""Jste senior intraday trader specializuj√≠c√≠ se na price action anal√Ωzu se zamƒõ≈ôen√≠m na intradenn√≠ obchodov√°n√≠. Analyzujte data s d≈Ørazem na kr√°tkodob√© p≈ô√≠le≈æitosti.

Symbol: {symbol}
Aktu√°ln√≠ cena: {latest_price:.2f}
# DATA PODLE ƒåASOV√ùCH R√ÅMC≈Æ
{''.join(timeframe_data)}

## 1. üìä KR√ÅTKODOB√ù TREND A KONTEXT (4h)
- Popi≈°te aktu√°ln√≠ strukturu trhu (vy≈°≈°√≠ high/low, ni≈æ≈°√≠ high/low)
- Objemov√Ω profil (kde se koncentruje nejv√≠ce objemu)
- Pozice v r√°mci vy≈°≈°√≠ho trendu

### HLAVN√ç SUPPORTN√ç Z√ìNY:
- (Uveƒète 1-2 kl√≠ƒçov√© supportn√≠ z√≥ny POUZE POD aktu√°ln√≠ cenou {latest_price:.2f}, ka≈ædou na nov√Ω ≈ô√°dek ve form√°tu "min-max")
- P≈ô√≠klad spr√°vn√©ho form√°tu: "78250-81000" (v≈ædy mus√≠ b√Ωt min < max a max < {latest_price:.2f})

### HLAVN√ç RESISTENƒåN√ç Z√ìNY:
- (Uveƒète 1-2 kl√≠ƒçov√© resistenƒçn√≠ z√≥ny POUZE NAD aktu√°ln√≠ cenou {latest_price:.2f}, ka≈ædou na nov√Ω ≈ô√°dek ve form√°tu "min-max")
- P≈ô√≠klad spr√°vn√©ho form√°tu: "90000-92000" (v≈ædy mus√≠ b√Ωt min > {latest_price:.2f} a min < max)

## 2. üîç INTRADAY P≈ò√çLE≈ΩITOSTI (30m)
- Aktu√°ln√≠ situace v 30-minutov√©m timeframe
- Kl√≠ƒçov√© patterny a v√Ωznamn√© cenov√© akce
- Potenci√°ln√≠ objemov√© divergence
- B√Ωƒç√≠/medvƒõd√≠ bias

## 3. üîé SCALPING SETUPS (5m)
- Specifick√© price action patterny (nap≈ô. pin bar, engulfing, inside bar)
- Order Blocks a FVG z√≥ny
- Cenov√© mezery (gaps)

## 4. üí° KONKR√âTN√ç OBCHODN√ç P≈ò√çLE≈ΩITOSTI
- P≈ôesn√© vstupn√≠ √∫rovnƒõ s popisem typu vstupu (breakout/pullback)
- Stop loss √∫rovnƒõ
- Take profit √∫rovnƒõ (alespo≈à 2 pro postupn√© vyb√≠r√°n√≠ zisku)
- ƒåasov√° platnost setupu

D≈ÆLE≈ΩIT√â:
- SUPPORTN√ç Z√ìNY MUS√ç B√ùT V≈ΩDY POD AKTU√ÅLN√ç CENOU, RESISTENƒåN√ç Z√ìNY V≈ΩDY NAD! ≈Ω√°dn√° supportn√≠ z√≥na nem≈Ø≈æe b√Ωt nad resistenƒçn√≠ z√≥nou!
- KONKR√âTN√ç informace, ≈æ√°dn√Ω v√°gn√≠ text
- P≈ôehledn√© a struƒçn√© odr√°≈æky
- DODR≈ΩUJTE p≈ôesn√Ω form√°t pro supportn√≠ a resistenƒçn√≠ z√≥ny jako "min-max" (nap≈ô. "85721-85532")
- NEVKL√ÅDEJTE sekce, pro kter√© nem√°te data
- NEZAHRNUJTE z√°vƒõreƒçn√© shrnut√≠ ani varov√°n√≠ na konci anal√Ωzy"""

        try:
            response = self.client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,
                max_tokens=2500
            )
            analysis = response.choices[0].message.content
    
            # Extrahov√°n√≠ z√≥n support≈Ø a resistanc√≠
            support_zones = self.extract_zones_from_analysis(analysis, "support")
            resistance_zones = self.extract_zones_from_analysis(analysis, "resistance")
    
            return analysis, support_zones, resistance_zones
    
        except Exception as e:
            raise Exception(f"Chyba p≈ôi generov√°n√≠ intraday anal√Ωzy: {str(e)}")

    def generate_multi_timeframe_analysis(self, symbol, dataframes):
        """
        Generuje multi-timeframe anal√Ωzu na z√°kladƒõ dat z r≈Øzn√Ωch ƒçasov√Ωch r√°mc≈Ø.
        Tato verze je urƒçena pro swing anal√Ωzu se zamƒõ≈ôen√≠m na st≈ôednƒõ a≈æ dlouhodob√© obchodov√°n√≠.
    
        Args:
            symbol (str): Obchodn√≠ symbol
            dataframes (dict): Slovn√≠k s DataFrame pro r≈Øzn√© ƒçasov√© r√°mce
        
        Returns:
            tuple: (anal√Ωza, support_z√≥ny, resistance_z√≥ny, scen√°≈ôe)
        """
        patterns_by_tf = {}
        for tf, df in dataframes.items():
            patterns_by_tf[tf] = self.detect_patterns(df)

        timeframe_data = []
        all_timeframes = ["1w", "1d", "4h"]
    
        for tf in all_timeframes:
            if tf in dataframes:
                df = dataframes[tf]
                num_candles = 5 if tf in ['1w', '1d'] else (7 if tf == '4h' else 10)
            
                tf_data = f"## ƒåasov√Ω r√°mec: {tf}\n"
                tf_data += f"Rozsah dat: {df.index[0]} a≈æ {df.index[-1]}\n"
                tf_data += f"Poƒçet sv√≠ƒçek: {len(df)}\n"
                tf_data += f"Posledn√≠ch {num_candles} sv√≠ƒçek:\n"
                tf_data += f"{df[['open','high','low','close','volume']].tail(num_candles).to_markdown()}\n\n"
            
                patterns = patterns_by_tf[tf]
                if patterns:
                    tf_data += f"Posledn√≠ patterny:\n"
                    for pattern in patterns[-8:]:  # Zobraz√≠me v√≠ce pattern≈Ø pro lep≈°√≠ anal√Ωzu
                        tf_data += f"- {pattern[0]} na √∫rovni {pattern[2]:.2f}-{pattern[3]:.2f} ({pattern[1]})\n"
            
                timeframe_data.append(tf_data)

        # Z√≠sk√°me aktu√°ln√≠ cenu z posledn√≠ho dataframe
        latest_price = None
        if '1d' in dataframes:
            latest_price = dataframes['1d']['close'].iloc[-1]
        elif '4h' in dataframes:
            latest_price = dataframes['4h']['close'].iloc[-1]

        prompt = f"""Jste senior trader specializuj√≠c√≠ se na price action anal√Ωzu. Analyzujte data s d≈Ørazem na v≈°echny ƒçasov√© r√°mce, bez poskytov√°n√≠ konkr√©tn√≠ch vstupn√≠ch bod≈Ø.

Symbol: {symbol}
Aktu√°ln√≠ cena: {latest_price:.2f}
# DATA PODLE ƒåASOV√ùCH R√ÅMC≈Æ
{''.join(timeframe_data)}

## 1. üìä DLOUHODOB√ù TREND (1W/1D)
- F√°zov√° anal√Ωza trhu (akumulace/distribuce, trendov√©/n√°razov√© pohyby)
- Kl√≠ƒçov√© weekly/daily uz√°vƒõry
- Fair Value Gaps (FVG) s p≈ôesn√Ωmi √∫rovnƒõmi cen (pokud existuj√≠)
- Order Blocks (OB) s p≈ôesn√Ωmi √∫rovnƒõmi cen (pokud existuj√≠)

### HLAVN√ç SUPPORTN√ç Z√ìNY:
- (Uveƒète 1-2 supportn√≠ z√≥ny POUZE POD aktu√°ln√≠ cenou {latest_price:.2f}, ka≈ædou na nov√Ω ≈ô√°dek ve form√°tu "min-max")
- P≈ô√≠klad spr√°vn√©ho form√°tu: "78250-81000" (v≈ædy mus√≠ b√Ωt min < max a max < {latest_price:.2f})

### HLAVN√ç RESISTENƒåN√ç Z√ìNY:
- (Uveƒète 1-2 resistenƒçn√≠ z√≥ny POUZE NAD aktu√°ln√≠ cenou {latest_price:.2f}, ka≈ædou na nov√Ω ≈ô√°dek ve form√°tu "min-max")
- P≈ô√≠klad spr√°vn√©ho form√°tu: "90000-92000" (v≈ædy mus√≠ b√Ωt min > {latest_price:.2f} a min < max)

## 2. üîç ST≈òEDNƒöDOB√ù KONTEXT (4H)
- Pozice v r√°mci vy≈°≈°√≠ho trendu
- V√Ωznamn√© cenov√© nerovnov√°hy (FVG) (pokud existuj√≠)
- Order Blocks na 4H timeframu (pokud existuj√≠)
- Objemov√© klastry

## 3. üí° MO≈ΩN√â SC√âN√Å≈òE DAL≈†√çHO V√ùVOJE

### BULLISH SC√âN√Å≈ò:
- Podm√≠nky a spou≈°tƒõƒçe
- C√≠lov√° √∫rove≈à: [P≈òESN√Å HODNOTA > {latest_price:.2f}]

### BEARISH SC√âN√Å≈ò:
- Podm√≠nky a spou≈°tƒõƒçe
- C√≠lov√° √∫rove≈à: [P≈òESN√Å HODNOTA < {latest_price:.2f}]

### NEUTR√ÅLN√ç SC√âN√Å≈ò:
- Podm√≠nky a pravdƒõpodobnost konsolidace
- Oƒçek√°van√Ω rozsah: [MIN]-[MAX] (mus√≠ zahrnovat aktu√°ln√≠ cenu {latest_price:.2f})

## 4. ‚ö†Ô∏è V√ùZNAMN√â √öROVNƒö K SLEDOV√ÅN√ç
- D≈Øle≈æit√© swingov√© high/low
- ≈Ω√ÅDN√â KONKR√âTN√ç VSTUPY - pouze √∫rovnƒõ k sledov√°n√≠
- Nezahrnujte sekce, pro kter√© nem√°te dostatek dat - pokud nem√°te pivot pointy, prostƒõ je nevyjmenov√°vejte

D≈ÆLE≈ΩIT√â:
- SUPPORTN√ç Z√ìNY MUS√ç B√ùT V≈ΩDY POD AKTU√ÅLN√ç CENOU, RESISTENƒåN√ç Z√ìNY V≈ΩDY NAD! ≈Ω√°dn√° supportn√≠ z√≥na nem≈Ø≈æe b√Ωt nad resistenƒçn√≠ z√≥nou!
- DODR≈ΩUJTE p≈ôesn√Ω form√°t pro supportn√≠ a resistenƒçn√≠ z√≥ny jako "min-max" (nap≈ô. "85721-85532")
- V≈°echny supportn√≠ a resistenƒçn√≠ z√≥ny mus√≠ b√Ωt ve spr√°vn√©m po≈ôad√≠ v≈Øƒçi aktu√°ln√≠ cenƒõ
- NEZAHRNUJTE ≈æ√°dn√© z√°vƒõreƒçn√© shrnut√≠ ani varov√°n√≠ na konci anal√Ωzy
- NEPI≈†TE fr√°ze jako "Tato anal√Ωza poskytuje p≈ôehled" nebo podobn√© shrnuj√≠c√≠ vƒõty
- NEVKL√ÅDEJTE sekce, pro kter√© nem√°te data - pokud nƒõco nelze urƒçit, sekci vynechte
- P≈ôehledn√© a struƒçn√© odr√°≈æky
- Pouze konkr√©tn√≠ informace, ≈æ√°dn√Ω v√°gn√≠ text
- Nepou≈æ√≠vejte ≈æ√°dn√° varov√°n√≠ ani 'AI' fr√°ze (nap≈ô√≠klad vyhnƒõte se 'v≈ædy si ovƒõ≈ôte aktu√°ln√≠ tr≈æn√≠ podm√≠nky')"""

        try:
            response = self.client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,
                max_tokens=3000
            )
            analysis = response.choices[0].message.content
        
            # Extrahov√°n√≠ z√≥n support≈Ø a resistanc√≠
            support_zones = self.extract_zones_from_analysis(analysis, "support")
            resistance_zones = self.extract_zones_from_analysis(analysis, "resistance")
        
            # Extrahov√°n√≠ sc√©n√°≈ô≈Ø pro vizualizaci
            scenarios = self.extract_scenarios_from_analysis(analysis, latest_price)
        
            return analysis, support_zones, resistance_zones, scenarios
        
        except Exception as e:
            raise Exception(f"Chyba p≈ôi generov√°n√≠ swing anal√Ωzy: {str(e)}")

    def extract_scenarios_from_analysis(self, analysis, current_price):
        """
        Extrahuje sc√©n√°≈ôe pro vizualizaci z textu anal√Ωzy.
        
        Args:
            analysis (str): Text anal√Ωzy
            current_price (float): Aktu√°ln√≠ cena
            
        Returns:
            list: Seznam sc√©n√°≈ô≈Ø ve form√°tu [('bullish', target_price), ('bearish', target_price), ...]
        """
        scenarios = []
        
        # Hled√°n√≠ bullish sc√©n√°≈ôe
        bullish_section = re.search(r"### BULLISH SC√âN√Å≈ò:(.*?)###", analysis, re.DOTALL)
        if bullish_section:
            # Hled√°n√≠ c√≠lov√© √∫rovnƒõ
            target_match = re.search(r"C√≠lov√° √∫rove≈à:\s*\[?(\d+(?:[.,]\d+)?)\]?", bullish_section.group(1))
            if target_match:
                try:
                    bullish_target = float(target_match.group(1).replace(',', '.'))
                    if bullish_target > current_price:
                        scenarios.append(('bullish', bullish_target))
                        logger.info(f"Extrahov√°n bullish sc√©n√°≈ô s c√≠lem: {bullish_target}")
                except (ValueError, IndexError) as e:
                    logger.warning(f"Chyba p≈ôi zpracov√°n√≠ bullish sc√©n√°≈ôe: {str(e)}")
        
        # Hled√°n√≠ bearish sc√©n√°≈ôe
        bearish_section = re.search(r"### BEARISH SC√âN√Å≈ò:(.*?)###", analysis, re.DOTALL)
        if bearish_section:
            # Hled√°n√≠ c√≠lov√© √∫rovnƒõ
            target_match = re.search(r"C√≠lov√° √∫rove≈à:\s*\[?(\d+(?:[.,]\d+)?)\]?", bearish_section.group(1))
            if target_match:
                try:
                    bearish_target = float(target_match.group(1).replace(',', '.'))
                    if bearish_target < current_price:
                        scenarios.append(('bearish', bearish_target))
                        logger.info(f"Extrahov√°n bearish sc√©n√°≈ô s c√≠lem: {bearish_target}")
                except (ValueError, IndexError) as e:
                    logger.warning(f"Chyba p≈ôi zpracov√°n√≠ bearish sc√©n√°≈ôe: {str(e)}")
        
        # Hled√°n√≠ neutr√°ln√≠ho sc√©n√°≈ôe
        neutral_section = re.search(r"### NEUTR√ÅLN√ç SC√âN√Å≈ò:(.*?)(?:##|\Z)", analysis, re.DOTALL)
        if neutral_section:
            # Hled√°n√≠ oƒçek√°van√©ho rozsahu
            range_match = re.search(r"Oƒçek√°van√Ω rozsah:\s*\[?(\d+(?:[.,]\d+)?)\]?-\[?(\d+(?:[.,]\d+)?)\]?", neutral_section.group(1))
            if range_match:
                try:
                    lower_bound = float(range_match.group(1).replace(',', '.'))
                    upper_bound = float(range_match.group(2).replace(',', '.'))
                    if lower_bound < upper_bound:
                        scenarios.append(('neutral', (lower_bound, upper_bound)))
                        logger.info(f"Extrahov√°n neutr√°ln√≠ sc√©n√°≈ô s rozsahem: {lower_bound}-{upper_bound}")
                except (ValueError, IndexError) as e:
                    logger.warning(f"Chyba p≈ôi zpracov√°n√≠ neutr√°ln√≠ho sc√©n√°≈ôe: {str(e)}")
        
        # Pokud nejsou nalezeny ≈æ√°dn√© sc√©n√°≈ôe, pou≈æijeme fallback metodu
        if not scenarios:
            logger.warning("Nebyly nalezeny ≈æ√°dn√© strukturovan√© sc√©n√°≈ôe, zkou≈°√≠m fallback metodu")
            
            # Hled√°n√≠ zm√≠nek o mo≈æn√Ωch c√≠lech
            bullish_matches = re.findall(r"[Bb]ullish.*?c√≠l.*?(\d{4,6}(?:[.,]\d+)?)", analysis)
            bearish_matches = re.findall(r"[Bb]earish.*?c√≠l.*?(\d{4,6}(?:[.,]\d+)?)", analysis)
            
            if bullish_matches:
                try:
                    bullish_target = float(bullish_matches[0].replace(',', '.'))
                    if bullish_target > current_price * 1.005:  # Alespo≈à 0.5% nad aktu√°ln√≠ cenou
                        scenarios.append(('bullish', bullish_target))
                except (ValueError, IndexError):
                    pass
                    
            if bearish_matches:
                try:
                    bearish_target = float(bearish_matches[0].replace(',', '.'))
                    if bearish_target < current_price * 0.995:  # Alespo≈à 0.5% pod aktu√°ln√≠ cenou
                        scenarios.append(('bearish', bearish_target))
                except (ValueError, IndexError):
                    pass
        
        logger.info(f"Extrahovan√© sc√©n√°≈ôe: {scenarios}")
        return scenarios

    def extract_zones_from_analysis(self, analysis, zone_type, current_price=None):
        """
        Extrahuje z√≥ny support≈Ø nebo resistanc√≠ z textu anal√Ωzy.
    
        Args:
            analysis (str): Text anal√Ωzy
            zone_type (str): Typ z√≥ny ('support' nebo 'resistance')
            current_price (float, optional): Aktu√°ln√≠ cena pro validaci z√≥n
        
        Returns:
            list: Seznam z√≥n ve form√°tu [(min1, max1), (min2, max2), ...]
        """
        zones = []
    
        # Urƒçen√≠ spr√°vn√©ho nadpisu sekce podle typu z√≥ny
        if zone_type.lower() == "support":
            section_header = "### HLAVN√ç SUPPORTN√ç Z√ìNY:"
        else:
            section_header = "### HLAVN√ç RESISTENƒåN√ç Z√ìNY:"
    
        # Hled√°n√≠ sekce se z√≥nami
        section_pattern = f"{re.escape(section_header)}(.*?)(?:###|\Z)"
        section_match = re.search(section_pattern, analysis, re.DOTALL)
    
        if section_match:
            section_text = section_match.group(1).strip()
            logger.info(f"Nalezena sekce {zone_type} z√≥n: {section_text}")
        
            # Hled√°n√≠ v≈°ech odr√°≈æek s cenov√Ωmi rozsahy
            bullet_points = re.findall(r"- (\d+(?:[.,]\d+)?)-(\d+(?:[.,]\d+)?)", section_text)
        
            for min_price, max_price in bullet_points:
                try:
                    min_value = float(min_price.replace(',', '.'))
                    max_value = float(max_price.replace(',', '.'))
                
                    # Z√°kladn√≠ validace hodnot
                    if min_value >= max_value:
                        logger.warning(f"Ignorov√°na neplatn√° z√≥na s min >= max: {min_value}-{max_value}")
                        continue
                
                    # Pokud je poskytnuta aktu√°ln√≠ cena, validujeme z√≥ny proti n√≠
                    if current_price is not None:
                        if zone_type.lower() == "support" and max_value >= current_price:
                            logger.warning(f"Ignorov√°na supportn√≠ z√≥na nad nebo na aktu√°ln√≠ cenƒõ: {min_value}-{max_value} (aktu√°ln√≠: {current_price})")
                            continue
                        elif zone_type.lower() == "resistance" and min_value <= current_price:
                            logger.warning(f"Ignorov√°na resistenƒçn√≠ z√≥na pod nebo na aktu√°ln√≠ cenƒõ: {min_value}-{max_value} (aktu√°ln√≠: {current_price})")
                            continue
                
                    zones.append((min_value, max_value))
                    logger.info(f"Extrahov√°na {zone_type} z√≥na: {min_value}-{max_value}")
                except (ValueError, IndexError) as e:
                    logger.warning(f"Chyba p≈ôi zpracov√°n√≠ {zone_type} z√≥ny: {str(e)}")
                    continue
        else:
            logger.warning(f"Sekce {section_header} nebyla nalezena v textu")
            
        # Fallback - zkus√≠me hledat v textu podle obecnƒõj≈°√≠ch vzor≈Ø
        if not zones:
            logger.warning(f"Pou≈æit√≠ fallback metody pro detekci {zone_type} z√≥n")
        
            if zone_type.lower() == "support":
                patterns = [
                    r"[Ss]upportn√≠ z√≥n[ay]?:?\s*(\d+(?:[.,]\d+)?)-(\d+(?:[.,]\d+)?)",
                    r"[Pp]odpora:?\s*(\d+(?:[.,]\d+)?)-(\d+(?:[.,]\d+)?)"
                ]
            else:
                patterns = [
                    r"[Rr]esistenƒçn√≠ z√≥n[ay]?:?\s*(\d+(?:[.,]\d+)?)-(\d+(?:[.,]\d+)?)",
                    r"[Rr]ezistence:?\s*(\d+(?:[.,]\d+)?)-(\d+(?:[.,]\d+)?)"
                ]
        
            for pattern in patterns:
                matches = re.findall(pattern, analysis)
                for min_price, max_price in matches:
                    try:
                        min_value = float(min_price.replace(',', '.'))
                        max_value = float(max_price.replace(',', '.'))
                    
                        # Z√°kladn√≠ validace hodnot
                        if min_value >= max_value:
                            logger.warning(f"Ignorov√°na neplatn√° z√≥na s min >= max: {min_value}-{max_value}")
                            continue
                    
                        # Pokud je poskytnuta aktu√°ln√≠ cena, validujeme z√≥ny proti n√≠
                        if current_price is not None:
                            if zone_type.lower() == "support" and max_value >= current_price:
                                logger.warning(f"Ignorov√°na supportn√≠ z√≥na nad nebo na aktu√°ln√≠ cenƒõ: {min_value}-{max_value} (aktu√°ln√≠: {current_price})")
                                continue
                            elif zone_type.lower() == "resistance" and min_value <= current_price:
                                logger.warning(f"Ignorov√°na resistenƒçn√≠ z√≥na pod nebo na aktu√°ln√≠ cenƒõ: {min_value}-{max_value} (aktu√°ln√≠: {current_price})")
                                continue
                    
                        zones.append((min_value, max_value))
                        logger.info(f"Extrahov√°na {zone_type} z√≥na fallbackem: {min_value}-{max_value}")
                    except (ValueError, IndexError) as e:
                        logger.warning(f"Chyba p≈ôi zpracov√°n√≠ {zone_type} z√≥ny: {str(e)}")
                        continue
    
        # Deduplikace z√≥n
        unique_zones = []
        for zone in zones:
            if zone not in unique_zones:
                unique_zones.append(zone)
    
        # Se≈ôazen√≠ z√≥n podle relevance k aktu√°ln√≠ cenƒõ
        if current_price is not None:
            if zone_type.lower() == "support":
                # Se≈ôadit supportn√≠ z√≥ny sestupnƒõ (nejvy≈°≈°√≠ prvn√≠ - bl√≠≈æe aktu√°ln√≠ cenƒõ)
                unique_zones.sort(key=lambda x: x[0], reverse=True)
            else:
                # Se≈ôadit resistenƒçn√≠ z√≥ny vzestupnƒõ (nejni≈æ≈°√≠ prvn√≠ - bl√≠≈æe aktu√°ln√≠ cenƒõ)
                unique_zones.sort(key=lambda x: x[0])
    
        return unique_zones

    def process_data(self, klines_data):
        """
        Zpracuje surov√° data z Binance API do pandas DataFrame.
       
        Args:
            klines_data (list): Seznam sv√≠ƒçek z Binance API
            
        Returns:
            pandas.DataFrame: Zpracovan√° data
        """
        df = pd.DataFrame(klines_data, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_volume', 'trades', 'taker_buy_base',
            'taker_buy_quote', 'ignore'
        ])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
       
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = df[col].astype(float)
           
        return df

    def process_multi_timeframe_data(self, multi_tf_data):
        """
        Zpracuje multi-timeframe data z Binance API.
      
        Args:
            multi_tf_data (dict): Slovn√≠k se seznamy sv√≠ƒçek pro r≈Øzn√© timeframy
            
        Returns:
            dict: Slovn√≠k s DataFrame pro ka≈æd√Ω timeframe
        """
        result = {}
        for timeframe, klines_data in multi_tf_data.items():
            if klines_data:
                df = self.process_data(klines_data)
                result[timeframe] = df
        return result
