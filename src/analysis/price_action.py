#!/usr/bin/env python3

from datetime import datetime, timedelta
import numpy as np
import pandas as pd
from openai import OpenAI
import re
import logging

logger = logging.getLogger(__name__)

class PriceActionAnalyzer:
    """T≈ô√≠da pro anal√Ωzu price action dat pomoc√≠ AI."""

    def __init__(self, api_key):
        """
        Inicializuje analyz√°tor price action.
        
        Args:
            api_key (str): OpenAI API kl√≠ƒç
        """
        self.client = OpenAI(api_key=api_key)

    def detect_patterns(self, df):
        """
        Detekuje price action patterny v DataFrame.
        
        Args:
            df (pandas.DataFrame): DataFrame s OHLCV daty
            
        Returns:
            list: Seznam detekovan√Ωch pattern≈Ø
        """
        patterns = []
        
        # Detekce cenov√Ωch nerovnov√°h (Fair Value Gaps)
        for i in range(1, len(df)-1):
            # Bullish nerovnov√°ha
            if df['low'].iloc[i] > df['high'].iloc[i-1]:
                patterns.append(('Bullish FVG', df.index[i], df['high'].iloc[i-1], df['low'].iloc[i]))
            
            # Bearish nerovnov√°ha
            if df['high'].iloc[i] < df['low'].iloc[i-1]:
                patterns.append(('Bearish FVG', df.index[i], df['high'].iloc[i], df['low'].iloc[i-1]))

        # Detekce siln√Ωch z√≥n (Order Blocks)
        for i in range(1, len(df)-1):
            body_size = abs(df['close'].iloc[i] - df['open'].iloc[i])
            total_range = df['high'].iloc[i] - df['low'].iloc[i]
            
            if total_range > 0 and body_size / total_range > 0.7:
                # Bullish Order Block (sv√≠ƒçka p≈ôed v√Ωrazn√Ωm pohybem vzh≈Øru)
                if i < len(df)-2 and df['close'].iloc[i+1] > df['open'].iloc[i+1] and df['close'].iloc[i+1] > df['close'].iloc[i]:
                    patterns.append(('Bullish OB', df.index[i], df['low'].iloc[i], df['high'].iloc[i]))
                
                # Bearish Order Block (sv√≠ƒçka p≈ôed v√Ωrazn√Ωm pohybem dol≈Ø)
                if i < len(df)-2 and df['close'].iloc[i+1] < df['open'].iloc[i+1] and df['close'].iloc[i+1] < df['close'].iloc[i]:
                    patterns.append(('Bearish OB', df.index[i], df['low'].iloc[i], df['high'].iloc[i]))

        # Detekce fale≈°n√Ωch pr≈Øraz≈Ø (Liquidity Sweeps)
        lookback = 5
        for i in range(lookback, len(df)-1):
            high_level = df['high'].iloc[i-lookback:i].max()
            low_level = df['low'].iloc[i-lookback:i].min()
            
            # Pr≈Øraz vysoko s n√°sledn√Ωm n√°vratem (false breakout)
            if df['high'].iloc[i] > high_level and df['close'].iloc[i+1] < high_level:
                patterns.append(('False High Breakout', df.index[i], high_level, df['high'].iloc[i]))
            
            # Pr≈Øraz n√≠zko s n√°sledn√Ωm n√°vratem (false breakout)
            if df['low'].iloc[i] < low_level and df['close'].iloc[i+1] > low_level:
                patterns.append(('False Low Breakout', df.index[i], df['low'].iloc[i], low_level))

        # Detekce swingov√Ωch high/low (v√Ωznamn√© vrcholy a dna)
        for i in range(2, len(df)-2):
            # Swing high (lok√°ln√≠ vrchol)
            if df['high'].iloc[i] > df['high'].iloc[i-1] and df['high'].iloc[i] > df['high'].iloc[i-2] and \
               df['high'].iloc[i] > df['high'].iloc[i+1] and df['high'].iloc[i] > df['high'].iloc[i+2]:
                patterns.append(('Swing High', df.index[i], df['high'].iloc[i] * 0.99, df['high'].iloc[i] * 1.01))
            
            # Swing low (lok√°ln√≠ dno)
            if df['low'].iloc[i] < df['low'].iloc[i-1] and df['low'].iloc[i] < df['low'].iloc[i-2] and \
               df['low'].iloc[i] < df['low'].iloc[i+1] and df['low'].iloc[i] < df['low'].iloc[i+2]:
                patterns.append(('Swing Low', df.index[i], df['low'].iloc[i] * 0.99, df['low'].iloc[i] * 1.01))

        return patterns

    def generate_multi_timeframe_analysis(self, symbol, dataframes):
        """
        Generuje multi-timeframe anal√Ωzu na z√°kladƒõ dat z r≈Øzn√Ωch ƒçasov√Ωch r√°mc≈Ø.
        Tato verze je upravena pro nezahrnov√°n√≠ konkr√©tn√≠ch vstup≈Ø a zamƒõ≈ôen√≠ na z√≥ny.
        
        Args:
            symbol (str): Obchodn√≠ symbol
            dataframes (dict): Slovn√≠k s DataFrame pro r≈Øzn√© ƒçasov√© r√°mce
            
        Returns:
            tuple: (anal√Ωza, support_z√≥ny, resistance_z√≥ny, scen√°≈ôe)
        """
        patterns_by_tf = {}
        for tf, df in dataframes.items():
            patterns_by_tf[tf] = self.detect_patterns(df)

        timeframe_data = []
        all_timeframes = ["1w", "1d", "4h", "30m", "5m"]
        
        for tf in all_timeframes:
            if tf in dataframes:
                df = dataframes[tf]
                num_candles = 5 if tf in ['1w', '1d'] else (7 if tf == '4h' else 10)
                
                tf_data = f"## ƒåasov√Ω r√°mec: {tf}\n"
                tf_data += f"Rozsah dat: {df.index[0]} a≈æ {df.index[-1]}\n"
                tf_data += f"Poƒçet sv√≠ƒçek: {len(df)}\n"
                tf_data += f"Posledn√≠ch {num_candles} sv√≠ƒçek:\n"
                tf_data += f"{df[['open','high','low','close','volume']].tail(num_candles).to_markdown()}\n\n"
                
                patterns = patterns_by_tf[tf]
                if patterns:
                    tf_data += f"Posledn√≠ patterny:\n"
                    for pattern in patterns[-8:]:  # Zobraz√≠me v√≠ce pattern≈Ø pro lep≈°√≠ anal√Ωzu
                        tf_data += f"- {pattern[0]} na √∫rovni {pattern[2]:.2f}-{pattern[3]:.2f} ({pattern[1]})\n"
                
                timeframe_data.append(tf_data)

        # Z√≠sk√°me aktu√°ln√≠ cenu z posledn√≠ho dataframe
        latest_price = None
        if '1d' in dataframes:
            latest_price = dataframes['1d']['close'].iloc[-1]
        elif '4h' in dataframes:
            latest_price = dataframes['4h']['close'].iloc[-1]

        prompt = f"""Jste senior trader specializuj√≠c√≠ se na price action anal√Ωzu. Analyzujte data s d≈Ørazem na v≈°echny ƒçasov√© r√°mce, bez poskytov√°n√≠ konkr√©tn√≠ch vstupn√≠ch bod≈Ø.

Symbol: {symbol}
Aktu√°ln√≠ cena: {latest_price:.2f}
# DATA PODLE ƒåASOV√ùCH R√ÅMC≈Æ
{''.join(timeframe_data)}

## 1. üìä DLOUHODOB√ù TREND (1W/1D)
- Hlavn√≠ supportn√≠ z√≥ny (min. 4 v√Ωznamn√© z√≥ny definovan√© jako rozsah cen, nap≈ô. 86000-86200)
- Hlavn√≠ resistenƒçn√≠ z√≥ny (min. 4 v√Ωznamn√© z√≥ny definovan√© jako rozsah cen, nap≈ô. 89400-89600)
- Fair Value Gaps (FVG) s p≈ôesn√Ωmi √∫rovnƒõmi cen
- Order Blocks (OB) s p≈ôesn√Ωmi √∫rovnƒõmi cen
- F√°zov√° anal√Ωza trhu (akumulace/distribuce, trendov√©/n√°razov√© pohyby)
- Kl√≠ƒçov√© weekly/daily uz√°vƒõry

## 2. üîç ST≈òEDNƒöDOB√ù KONTEXT (4H)
- Pozice v r√°mci vy≈°≈°√≠ho trendu
- V√Ωznamn√© cenov√© nerovnov√°hy (FVG)
- Order Blocks na 4H timeframu
- Objemov√© klastry
- Hlavn√≠ supportn√≠ a resistenƒçn√≠ z√≥ny

## 3. üí° MO≈ΩN√â SC√âN√Å≈òE DAL≈†√çHO V√ùVOJE
- Bullish sc√©n√°≈ô (popi≈°te podm√≠nky, spou≈°tƒõƒçe a potenci√°ln√≠ c√≠lov√© √∫rovnƒõ)
  - D≈ÆLE≈ΩIT√â: Uveƒète konkr√©tn√≠ cenov√© c√≠le ve form√°tu ƒç√≠sla (nap≈ô. 92000), ne jako rozsah
  - Popi≈°te, jak by cena mohla nar√°≈æet na kl√≠ƒçov√© rezistence bƒõhem sv√© cesty nahoru
- Bearish sc√©n√°≈ô (popi≈°te podm√≠nky, spou≈°tƒõƒçe a potenci√°ln√≠ c√≠lov√© √∫rovnƒõ) 
  - D≈ÆLE≈ΩIT√â: Uveƒète konkr√©tn√≠ cenov√© c√≠le ve form√°tu ƒç√≠sla (nap≈ô. 84000), ne jako rozsah
  - Popi≈°te, jak by cena mohla nar√°≈æet na kl√≠ƒçov√© supporty bƒõhem sv√© cesty dol≈Ø
- Neutr√°ln√≠ sc√©n√°≈ô (konsolidace nebo range bound chov√°n√≠)

## 4. ‚ö†Ô∏è V√ùZNAMN√â √öROVNƒö K SLEDOV√ÅN√ç
- Denn√≠ pivot pointy
- D≈Øle≈æit√© swingov√© high/low
- ≈Ω√ÅDN√â KONKR√âTN√ç VSTUPY - pouze √∫rovnƒõ k sledov√°n√≠

Form√°t:
- P≈ôehledn√© a struƒçn√© odr√°≈æky
- Pouze konkr√©tn√≠ informace, ≈æ√°dn√Ω v√°gn√≠ text
- Nepou≈æ√≠vejte ≈æ√°dn√° varov√°n√≠ ani 'AI' fr√°ze (nap≈ô√≠klad vyhnƒõte se 'v≈ædy si ovƒõ≈ôte aktu√°ln√≠ tr≈æn√≠ podm√≠nky')
- ƒåasov√© raz√≠tko: {datetime.now().strftime("%d.%m.%Y %H:%M")}"""

        try:
            response = self.client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,
                max_tokens=3000
            )
            analysis = response.choices[0].message.content
            
            # Extrahov√°n√≠ z√≥n support≈Ø a resistanc√≠
            support_zones = self.extract_zones_from_analysis(analysis, "support")
            resistance_zones = self.extract_zones_from_analysis(analysis, "resistance")
            
            # Extrahov√°n√≠ sc√©n√°≈ô≈Ø pro vizualizaci
            scenarios = self.extract_scenarios_from_analysis(analysis, latest_price)
            
            return analysis, support_zones, resistance_zones, scenarios
            
        except Exception as e:
            raise Exception(f"Chyba p≈ôi generov√°n√≠ multi-timeframe anal√Ωzy: {str(e)}")

    def extract_scenarios_from_analysis(self, analysis, current_price):
        """
        Extrahuje sc√©n√°≈ôe pro vizualizaci z textu anal√Ωzy.
        
        Args:
            analysis (str): Text anal√Ωzy
            current_price (float): Aktu√°ln√≠ cena
            
        Returns:
            list: Seznam sc√©n√°≈ô≈Ø ve form√°tu [('bullish', target_price), ('bearish', target_price), ...]
        """
        scenarios = []
        
        # Hledat sekci "MO≈ΩN√â SC√âN√Å≈òE DAL≈†√çHO V√ùVOJE" nebo podobnou
        scenario_section = re.search(r'(MO≈ΩN√â SC√âN√Å≈òE|SC√âN√Å≈òE|SCEN√Å≈òE|V√ùVOJE)(.*?)(##|\Z)', 
                                    analysis, re.DOTALL | re.IGNORECASE)
        
        if scenario_section:
            scenario_text = scenario_section.group(2)
            
            # Hled√°n√≠ bullish sc√©n√°≈ôe a ceny - p≈ôesnƒõj≈°√≠ pattern zamƒõ≈ôen√Ω na ƒç√≠seln√© c√≠le
            bullish_target = None
            bullish_section = re.search(r'[Bb]ullish.*?(\d{4,6})', scenario_text)
            if bullish_section:
                try:
                    bullish_target = float(bullish_section.group(1).replace(',', '.'))
                    if bullish_target > current_price * 1.005:  # Mus√≠ b√Ωt aspo≈à 0.5% nad aktu√°ln√≠ cenou
                        scenarios.append(('bullish', bullish_target))
                except (ValueError, IndexError):
                    pass
            
            # Pokud nebyl nalezen konkr√©tn√≠ c√≠l, hledej i v jin√Ωch form√°tech
            if not bullish_target:
                bullish_patterns = [
                    r"[Bb]ullish.*?(\d{4,6})",
                    r"[Vv]zh≈Øru.*?(\d{4,6})",
                    r"[Rr]≈Øst.*?(\d{4,6})",
                    r"[Cc]√≠l.*?(\d{4,6})"
                ]
                
                for pattern in bullish_patterns:
                    matches = re.findall(pattern, scenario_text)
                    for match in matches:
                        try:
                            price = float(match.replace(',', '.'))
                            if price > current_price * 1.005:  # Mus√≠ b√Ωt aspo≈à 0.5% nad aktu√°ln√≠ cenou
                                scenarios.append(('bullish', price))
                                break
                        except (ValueError, IndexError):
                            continue
                    if len(scenarios) > 0 and scenarios[-1][0] == 'bullish':
                        break
            
            # Hled√°n√≠ bearish sc√©n√°≈ôe a ceny - p≈ôesnƒõj≈°√≠ pattern zamƒõ≈ôen√Ω na ƒç√≠seln√© c√≠le
            bearish_target = None
            bearish_section = re.search(r'[Bb]earish.*?(\d{4,6})', scenario_text)
            if bearish_section:
                try:
                    bearish_target = float(bearish_section.group(1).replace(',', '.'))
                    if bearish_target < current_price * 0.995:  # Mus√≠ b√Ωt aspo≈à 0.5% pod aktu√°ln√≠ cenou
                        scenarios.append(('bearish', bearish_target))
                except (ValueError, IndexError):
                    pass
            
            # Pokud nebyl nalezen konkr√©tn√≠ c√≠l, hledej i v jin√Ωch form√°tech
            if not bearish_target:
                bearish_patterns = [
                    r"[Bb]earish.*?(\d{4,6})",
                    r"[Pp]okles.*?(\d{4,6})",
                    r"[Pp]√°d.*?(\d{4,6})",
                    r"[Dd]ol≈Ø.*?(\d{4,6})"
                ]
                
                for pattern in bearish_patterns:
                    matches = re.findall(pattern, scenario_text)
                    for match in matches:
                        try:
                            price = float(match.replace(',', '.'))
                            if price < current_price * 0.995:  # Mus√≠ b√Ωt aspo≈à 0.5% pod aktu√°ln√≠ cenou
                                scenarios.append(('bearish', price))
                                break
                        except (ValueError, IndexError):
                            continue
                    if len(scenarios) > 0 and scenarios[-1][0] == 'bearish':
                        break
        
        # Pokud jsme nena≈°li ≈æ√°dn√© sc√©n√°≈ôe, zkus√≠me prohledat cel√Ω text
        if not scenarios:
            # Obecn√Ω pattern pro nalezen√≠ cenov√Ωch hodnot
            price_pattern = r'\b(\d{4,6})\b'
            prices = re.findall(price_pattern, analysis)
            
            prices = [float(p) for p in prices if p.isdigit()]
            prices = sorted(list(set(prices)))  # Deduplikace a se≈ôazen√≠
            
            # Identifikace bullish a bearish c√≠l≈Ø na z√°kladƒõ aktu√°ln√≠ ceny
            bullish_target = None
            bearish_target = None
            
            for price in prices:
                if price > current_price * 1.05:  # 5% nad aktu√°ln√≠ cenou
                    if not bullish_target or price > bullish_target:
                        bullish_target = price
                elif price < current_price * 0.95:  # 5% pod aktu√°ln√≠ cenou
                    if not bearish_target or price < bearish_target:
                        bearish_target = price
            
            if bullish_target:
                scenarios.append(('bullish', bullish_target))
            if bearish_target:
                scenarios.append(('bearish', bearish_target))
        
        # Logov√°n√≠ nalezen√Ωch sc√©n√°≈ô≈Ø pro ladƒõn√≠
        logger.info(f"Nalezen√© sc√©n√°≈ôe: {scenarios}")
        
        return scenarios

    def process_data(self, klines_data):
        """
        Zpracuje surov√° data z Binance API do pandas DataFrame.
       
        Args:
            klines_data (list): Seznam sv√≠ƒçek z Binance API
            
        Returns:
            pandas.DataFrame: Zpracovan√° data
        """
        df = pd.DataFrame(klines_data, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_volume', 'trades', 'taker_buy_base',
            'taker_buy_quote', 'ignore'
        ])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
       
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = df[col].astype(float)
           
        return df

    def extract_zones_from_analysis(self, analysis, zone_type):
        """
        Extrahuje z√≥ny support≈Ø nebo resistanc√≠ z textu anal√Ωzy.
        
        Args:
            analysis (str): Text anal√Ωzy
            zone_type (str): Typ z√≥ny ('support' nebo 'resistance')
        
        Returns:
            list: Seznam z√≥n ve form√°tu [(min1, max1), (min2, max2), ...]
        """
        zones = []
    
        # R≈Øzn√© mo≈æn√© variace n√°zv≈Ø v textu
        if zone_type.lower() == "support":
            patterns = [
                r"[Ss]upportn√≠ z√≥n[ay]:\s*([0-9,.-]+)-([0-9,.-]+)",
                r"[Ss]upport[n√≠]{0,2} z√≥n[ay]?.*?([0-9,.-]+)-([0-9,.-]+)",
                r"[Ss]upport.*?([0-9,.-]+)-([0-9,.-]+)",
                r"[Bb]ullish OB.*?([0-9,.-]+)-([0-9,.-]+)",
                r"[Bb]ullish FVG.*?([0-9,.-]+)-([0-9,.-]+)"
            ]
        else:  # resistance
            patterns = [
                r"[Rr]esistenƒçn√≠ z√≥n[ay]:\s*([0-9,.-]+)-([0-9,.-]+)",
                r"[Rr]esisten[cƒç][en]√≠ z√≥n[ay]?.*?([0-9,.-]+)-([0-9,.-]+)",
                r"[Rr]esisten[cƒç][en].*?([0-9,.-]+)-([0-9,.-]+)",
                r"[Bb]earish OB.*?([0-9,.-]+)-([0-9,.-]+)",
                r"[Bb]earish FVG.*?([0-9,.-]+)-([0-9,.-]+)"
            ]
    
        for pattern in patterns:
            matches = re.findall(pattern, analysis)
            for match in matches:
                try:
                    min_value = float(match[0].replace(',', '.'))
                    max_value = float(match[1].replace(',', '.'))
                    zones.append((min_value, max_value))
                except (ValueError, IndexError):
                    continue
    
        # Pokud nenajdeme z√≥ny pomoc√≠ rozsah≈Ø, zkus√≠me hledat konkr√©tn√≠ hodnoty
        if not zones:
            if zone_type.lower() == "support":
                value_pattern = r'[Ss]upport.*?([0-9,.-]+)'
            else:
                value_pattern = r'[Rr]esisten[cƒç][en].*?([0-9,.-]+)'
        
            matches = re.findall(value_pattern, analysis)
            for match in matches:
                try:
                    value = float(match.replace(',', '.'))
                    # Vytvo≈ô√≠me z konkr√©tn√≠ hodnoty malou z√≥nu (¬±0.5%)
                    margin = value * 0.005
                    zones.append((value - margin, value + margin))
                except ValueError:
                    continue
    
        # Omezen√≠ poƒçtu z√≥n pro lep≈°√≠ p≈ôehlednost a v√Ωkon (max 8 - upraveno pro zahrnut√≠ v√≠ce √∫rovn√≠)
        if len(zones) > 8:
            zones = zones[:8]
        
        return zones

    def process_multi_timeframe_data(self, multi_tf_data):
        """
        Zpracuje multi-timeframe data z Binance API.
      
        Args:
            multi_tf_data (dict): Slovn√≠k se seznamy sv√≠ƒçek pro r≈Øzn√© timeframy
            
        Returns:
            dict: Slovn√≠k s DataFrame pro ka≈æd√Ω timeframe
        """
        result = {}
        for timeframe, klines_data in multi_tf_data.items():
            if klines_data:
                df = self.process_data(klines_data)
                result[timeframe] = df
        return result
