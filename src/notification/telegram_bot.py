#!/usr/bin/env python3

import requests
import logging
import os

logger = logging.getLogger(__name__)

class TelegramBot:
    """T콏칤da pro odes칤l치n칤 zpr치v p콏es Telegram."""
    
    def __init__(self, token, chat_id):
        """
        Inicializuje Telegram bota.
        
        Args:
            token (str): Token Telegram bota
            chat_id (str): ID chatu nebo kan치lu
        """
        self.token = token
        self.chat_id = chat_id
    
    def send_message(self, text):
        """
        Ode코le zpr치vu do Telegram chatu/kan치lu.
        
        Args:
            text (str): Text zpr치vy (podporuje Markdown)
            
        Returns:
            bool: True pokud byla zpr치va 칰sp캩코n캩 odesl치na
            
        Raises:
            Exception: Pokud se zpr치vu nepoda콏ilo odeslat
        """
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        params = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        
        try:
            response = requests.post(url, params=params)
            response.raise_for_status()
            
            logger.info(f"Zpr치va 칰sp캩코n캩 odesl치na do Telegramu (chat_id: {self.chat_id})")
            return True
            
        except requests.exceptions.HTTPError as e:
            error_msg = f"HTTP chyba p콏i odes칤l치n칤 do Telegramu: {e}"
            logger.error(error_msg)
            raise Exception(error_msg)
            
        except requests.exceptions.ConnectionError as e:
            error_msg = f"Chyba p콏ipojen칤 p콏i odes칤l치n칤 do Telegramu: {e}"
            logger.error(error_msg)
            raise Exception(error_msg)
            
        except Exception as e:
            error_msg = f"Chyba p콏i odes칤l치n칤 do Telegramu: {str(e)}"
            logger.error(error_msg)
            raise Exception(error_msg)

    def send_message_with_image(self, text, image_path):
        """
        Ode코le zpr치vu s obr치zkem do Telegram chatu/kan치lu.
        
        Args:
            text (str): Text zpr치vy (podporuje Markdown)
            image_path (str): Cesta k obr치zku
            
        Returns:
            bool: True pokud byla zpr치va 칰sp캩코n캩 odesl치na
            
        Raises:
            Exception: Pokud se zpr치vu nepoda콏ilo odeslat
        """
        url = f"https://api.telegram.org/bot{self.token}/sendPhoto"
        
        # Kontrola, zda soubor existuje
        if not os.path.exists(image_path):
            error_msg = f"Soubor s obr치zkem neexistuje: {image_path}"
            logger.error(error_msg)
            raise Exception(error_msg)
        
        # Kontrola, zda text nen칤 p콏칤li코 dlouh칳
        if len(text) > 1024:
            logger.warning(f"Text je p콏칤li코 dlouh칳 pro caption (m치 {len(text)} znak콢, limit je 1024). O콏ez치v치m.")
            # O콏칤znut칤 textu na 1000 znak콢 + "..."
            text = text[:1000] + "..."
        
        try:
            with open(image_path, 'rb') as image_file:
                files = {'photo': image_file}
                data = {
                    "chat_id": self.chat_id,
                    "caption": text,
                    "parse_mode": "Markdown"
                }
                
                response = requests.post(url, data=data, files=files)
                response.raise_for_status()
            
            logger.info(f"Zpr치va s obr치zkem 칰sp캩코n캩 odesl치na do Telegramu (chat_id: {self.chat_id})")
            return True
            
        except requests.exceptions.HTTPError as e:
            error_msg = f"HTTP chyba p콏i odes칤l치n칤 obr치zku do Telegramu: {e}"
            logger.error(error_msg)
            raise Exception(error_msg)
            
        except requests.exceptions.ConnectionError as e:
            error_msg = f"Chyba p콏ipojen칤 p콏i odes칤l치n칤 obr치zku do Telegramu: {e}"
            logger.error(error_msg)
            raise Exception(error_msg)
            
        except Exception as e:
            error_msg = f"Chyba p콏i odes칤l치n칤 obr치zku do Telegramu: {str(e)}"
            logger.error(error_msg)
            raise Exception(error_msg)

    def send_analysis_with_chart(self, analysis, chart_path):
        """
        Ode코le anal칳zu s grafem do Telegram chatu/kan치lu.
        
        Pokud je anal칳za p콏칤li코 dlouh치 pro caption u obr치zku, rozd캩l칤 ji
        na dv캩 zpr치vy - prvn칤 s textem a druhou s obr치zkem.
        
        Args:
            analysis (str): Text anal칳zy (podporuje Markdown)
            chart_path (str): Cesta ke grafu
            
        Returns:
            bool: True pokud byly zpr치vy 칰sp캩코n캩 odesl치ny
        """
        # Pokud je anal칳za p콏칤li코 dlouh치 pro caption (limit 1024 znak콢)
        if len(analysis) > 1024:
            # Nejprve po코leme samotnou anal칳zu
            self.send_message(analysis)
            
            # Pak po코leme graf s kr치tk칳m popisem
            caption = "游늵 *Sv칤캜kov칳 graf s vyzna캜en칳mi z칩nami*"
            self.send_message_with_image(caption, chart_path)
        else:
            # Jinak po코leme v코e v jedn칠 zpr치v캩
            self.send_message_with_image(analysis, chart_path)
        
        return True
